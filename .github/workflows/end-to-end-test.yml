name: E2E Test

# This builds all binary versions and runs the end-to-end test against test Dynatrace environments
# This currently only runs on push to main and nightly

on:
  push:
    branches: [ main ]
  schedule:
    # nightly build ensure E2E tests run daily and catch any breaking API changes
    - cron: '0 0 * * *'
  pull_request_target:
    types: [labeled]

defaults:
  run:
    shell: bash

env:
  BASE_REPO: 'Dynatrace/internal-monitoring-as-cde'  # Used to only execute directly if running in main repository, not on forks/PRs inside forks
  E2E_TEST_LABEL: 'run-e2e-test'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: '~1.19'
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3.2.0

      - name: üèÅ Build release binaries
        run: make build-release

      - name: üåé Integration test
        if: github.repository == env.BASE_REPO || github.event.label.name == env.E2E_TEST_LABEL
        run: make integration-test
        env:
          URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
          URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
          TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
          TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}

      - name: üßì Integration test (legacy)
        if: github.repository == env.BASE_REPO || github.event.label.name == env.E2E_TEST_LABEL
        run: make integration-test-v1
        env:
          URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
          URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
          TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
          TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}

      - name: üì•/üì§ Download/Restore test
        if: github.repository == env.BASE_REPO || github.event.label.name == env.E2E_TEST_LABEL
        run: make download-restore-test
        env:
          URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
          URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
          TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
          TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}

      - name: üåô Nightly Tests
        if: github.repository == env.BASE_REPO && github.event_name == 'schedule'
        run: make nightly-test
        env:
          URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
          URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
          TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
          TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}

      - name: üßπ Cleanup
        if: github.repository == env.BASE_REPO && github.event_name == 'schedule'
        run: make clean-environments
        env:
          URL_ENVIRONMENT_1: ${{ secrets.URL_ENVIRONMENT_1 }}
          URL_ENVIRONMENT_2: ${{ secrets.URL_ENVIRONMENT_2 }}
          TOKEN_ENVIRONMENT_1: ${{ secrets.TOKEN_ENVIRONMENT_1 }}
          TOKEN_ENVIRONMENT_2: ${{ secrets.TOKEN_ENVIRONMENT_2 }}
